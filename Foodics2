import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import static io.restassured.RestAssured.*;
import static org.testng.Assert.*;

public class ApiTest {

    private static final String BASE_URL = "https://pay2.foodics.dev/cp_internal";
    private static final String LOGIN_ENDPOINT = "/login";
    private static final String WHOAMI_ENDPOINT = "/whoami";

    private String authToken;

    @BeforeClass
    public void setup() {
        RestAssured.baseURI = BASE_URL;

        // Login and retrieve the token
        Response loginResponse = given()
            .contentType(ContentType.JSON)
            .body("{ \"email\": \"merchant@foodics.com\", \"password\": \"123456\" }")
            .post(LOGIN_ENDPOINT);
        
        // Check login response status and extract the token
        assertEquals(loginResponse.getStatusCode(), 200, "Login failed with status code");
        authToken = loginResponse.jsonPath().getString("token");
        assertNotNull(authToken, "Token should not be null");
    }

    @Test
    public void testWhoamiEndpoint() {
        Response whoamiResponse = given()
            .header("Authorization", "Bearer " + authToken)
            .when()
            .get(WHOAMI_ENDPOINT);

        // Validate the response
        assertEquals(whoamiResponse.getStatusCode(), 200, "Whoami endpoint returned an error status code");
        assertNotNull(whoamiResponse.getBody().asString(), "Response body should not be null");
    }

    @Test
    public void testLoginEndpoint() {
        Response loginResponse = given()
            .contentType(ContentType.JSON)
            .body("{ \"email\": \"merchant@foodics.com\", \"password\": \"123456\" }")
            .post(LOGIN_ENDPOINT);

        // Validate the response
        assertEquals(loginResponse.getStatusCode(), 200, "Login endpoint returned an error status code");
        String token = loginResponse.jsonPath().getString("token");
        assertNotNull(token, "Token should not be null");
    }

    @Test
    public void testInvalidLogin() {
        Response loginResponse = given()
            .contentType(ContentType.JSON)
            .body("{ \"email\": \"invalid@foodics.com\", \"password\": \"wrongpassword\" }")
            .post(LOGIN_ENDPOINT);

        // Validate the response
        assertEquals(loginResponse.getStatusCode(), 401, "Expected status code for invalid login should be 401");
    }
}
